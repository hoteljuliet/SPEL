stopOnFailure: true
config:

  - add: {dest: "aLong", value: 5l}
  - cast: {value: "aLong", to: "double"}
  #- cast: {source: "notANumber", to: "int"}


  - add: {dest: "listOfMaps", value: [{name: dennis, age: 25}, {name: dennis, age: 25}, {name: dennis, age: 15}] }
  - foreach-listOfMaps:
      - remove: {sources: ["i.age"]}
  - if:
    sample: {pct: 5}
    then:
      - add: {dest: "fivePct", value: true}

  - add: {dest: "fuzzy1", value: "a string to match"}

  - if:
    fuzzy-ratio: {first: "{{fuzzy1}}", second: "a string to march", ratio: 90}
    then:
      - add: {dest: "fuzzy1Good", value: true}

  - if:
    fuzzy-ratio: {first: "a string to match", second: "a string to march", ratio: 90}
    then:
      - add: {dest: "fuzzy1Good", value: true}


  - add: {dest: translate1, value: '404'}
  - translate: {value: translate1, default: "unknown", dict: { "404": "NOT FOUND"}}

  - cardinality: {value: translate1, precision: 5, dest: card}

  - add: {dest: kvString1, value: 'this=that, you=me, potatoe=potatoh, tomatoe=tomahtoh'}
  - key-value: {source: kvString1, delimiter: ',', separator: '=',  dest: kvMap1}

  - add: {dest: kvString2, value: 'this:that; you:me; potatoe:potatoh; tomatoe:tomahtoh'}
  - key-value: {source: kvString2, delimiter: ';', separator: ':',  dest: kvMap2}

  - now: {dest: "now1", to: "MM-dd-YY", zone: Z, name: "myFavoriteNow"}
  - now: {dest: "now2", to: "unix_ms", zone: Z}
  - now: {dest: "now3", to: "unix_s", zone: Z}
  - add: {dest: jsonMapString, value: '{ "this": "that" }'}
  - json-map: {source: jsonMapString, dest: jsonMapped}
  - add: {dest: jsonListString, value: '[ "this", "that" ]'}
  - json-list: {source: jsonListString, dest: jsonListed}
  - foreach-jsonListed:
      - hash : {value: "i", dest: "i", algo: "SHA-256"}
  - as-list: {values: [now1, now2, now3], list: list1}
  - append: {value: jsonMapString, list: list1}
  - add: {dest: "a.a", value: 1.0}
  - add: {dest: "z.z", value: 1.0}
  # - math: {dest: "mathResult_exp4j", exp: "{{a.a}} + {{z.z}}"}
  - crunch: {dest: "mathResult_crunch", exp: "$1 + $2", variables: ["a.a", "z.z"]}
  - add: {dest: "user", value: "${USER}"}
  - add: {dest: "copy", value: "{{a.a}}"}
  - add: {dest: "a.b", value: 2.0}
  - add: {dest: "x", value: "y"}
  - add: {dest: "x.y", value: "1"}
  - lookup-i: {sources: ["x.y"], dests: ["x.y.lookup"], default: "unknown", dict: {"1": "some_metadata"} }
  - add: {dest: "x.z", value: "this is a string"}
  - add: {dest: "x.csv", value: "this, is, a, csv, string"}
  - add: {dest: "p.pipe", value: "this|is|a|piped|string"}
  - add: {dest: "notANumber", value: "notANumber"}
  - b64: {value: "x.z", dest: "encoded", action: encode}
  - b64: {value: "encoded", dest: "decoded", action: decode}
  - hash: {value: "decoded", dest: "hashed", algo: "SHA-256"}
  - keyed-hash: {value: "decoded", dest: "hashed", iter: 10000, salt: "somesalt", pass: "${USER}"}
  - delimit: {source: x.csv, delimiter: ',', quote: '"', dests: [a.first, a.second, a.third, a.fourth, a.fifth] }
  - delimit: {source: p.pipe, delimiter: '|', quote: '"', dests: [b.first, b.second, b.third, b.fourth, b.fifth] }
  #- if-isGraterExp4j?:
  #  math: {exp: "{{a.a}} > {{a.b}}"}
  #  then:
  #    - remove: {sources: ["x.y"]}

  - if-isGraterCrunch?:
    crunch: {exp: "$1 > $2", variables: ["a.a", "a.b"]}
    then:
      - remove: {sources: ["x.y"]}


  - if-matches?:
    matches: {value: "user", regex: ".*dennis*"}
    then:
      - add: {dest: "matches1", value: "user does not match .*dennis*"}

  - if-notMatches?:
    not:
      - matches: {value: "user", regex: ".*truck*"}
    then:
      - add: {dest: "matches1", value: "user does not match .*truck*"}

  - add: {dest: someString, value: y}
  - if:
    in: {value: someString, list: [a, b, c, y]}
    then:
      - add: {dest: "matches1", value: "someString in: [a, b, c, y]"}

  - if-firstLevel?:
    in: {value: someString, list: [a, b, c, y]}
    then:
      - if-secondLevel?:
        in: {value: someString, list: [a, b, c, y]}
        then:
          - add: {dest: "nextedIf", value: "worked"}

  - rename: {dict: {"a.a" : "a1.a1", "z.z" : "z1.z1"}}
  - add: {dest: someDouble, value: 12345.123456789}
  - round: {value: someDouble, format: "######.###" }
  - add: {dest: whitespace, value: "lots o spaces         here"}
  - strip: {value: whitespace}
  - add: {dest: s1, value: "string1"}
  - add: {dest: s2, value: "string2"}
  - add: {dest: s3, value: "string3"}
  - concat: {values: [s1, s2, s3], dest: concatenation}
